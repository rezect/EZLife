use crate::*;


pub async fn help_command(bot: Bot, msg: Message) -> HandlerResult {
    let help_text = "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç EZLife\\. üòä
–Ø \\- –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –≤ [Notion](https://www\\.notion\\.so)\\. ü§ñ

*–Ø –º–æ–≥—É:*üí™üòé
_*1\\. –ó–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å*_ \\(–ª—É—á—à–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å –±–ª–∏–∂–µ –∫ –≤–µ—á–µ—Ä—É\\): üåÜ
    –í –¥–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: —Ç–≤–æ—è _—ç–Ω–µ—Ä–≥–∏—è_ –∑–∞ –¥–µ–Ω—å, —Ç–≤–æ–∏ _—ç–º–æ—Ü–∏–∏_, –æ–±—â–∏–π _–æ—Ç–∑—ã–≤ –æ –¥–Ω–µ_ –∏ _—Ä–µ–π—Ç–∏–Ω–≥ –¥–Ω—è_ –æ—Ç 0 –¥–æ 10\\.
_*2\\. –°–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –∑–∞–º–µ—Ç–∫—É*_: üöÄ
    –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫–æ–µ\\-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\\.

–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏\\. –ò—Å–ø–æ–ª—å–∑—É—è –∏—Ö –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ Notion\\. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–π —Ä–∞–∑–¥–µ–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ –¥–Ω–∏\\. –í –æ–±—â–µ–º –¥–µ–ª–∞–π—Ç–µ –∫–∞–∫ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ, –ø–æ—ç—Ç–æ–º—É Notion –∏ –∫–ª–∞—Å—Å–Ω—ã–π\\. üìù
–ë–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Notion, —Ç–∞–∫ —á—Ç–æ –ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ.
‚ùóÔ∏è–í–∞–∂–Ω–æ: –Ω–µ –º–µ–Ω—è–π—Ç–µ —Ü–≤–µ—Ç —Ç–µ–≥–æ–≤ –∏ –∫–æ–ª–æ–Ω–∫–∏ –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ç—É–¥–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π‚ùóÔ∏è
–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\\! üåü

*–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:*
_*1\\. /notion*_ \\- –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ Notion, –≥–¥–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–Ω–∏ –∏ –∑–∞–º–µ—Ç–∫–∏\\.
_*2\\. /day*_ \\- –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –¥–Ω–µ\\.
_*3\\. /note*_ \\- —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –∑–∞–º–µ—Ç–∫—É\\.
_*4\\. /sleep*_ \\- –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º, –≥–¥–µ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ YaGPT \\(–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç Yandex\\)\\.";
    bot.send_message(msg.chat.id, help_text)
        .parse_mode(ParseMode::MarkdownV2)
        .await?;
    Ok(())
}

pub async fn new_day_command(bot: Bot, msg: Message, dialogue: MyDialogue) -> HandlerResult {
    if !is_notion_integration_exist(msg.chat.id.to_string()).await {
        bot.send_message(msg.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Notion.").await?;
        dialogue.update(State::Waiting).await?;
        return Ok(());
    }
    let keyboard = make_keyboard_energy().await;
    bot.send_message(msg.chat.id, "–ö–∞–∫–∞—è —É –≤–∞—Å –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è —ç–Ω–µ—Ä–≥–∏—è?").reply_markup(keyboard).await?;
    dialogue.update(State::EnergyError).await?;
    Ok(())
}

pub async fn sleep_command(bot: Bot, dialogue: MyDialogue) -> HandlerResult {
    bot.send_message(dialogue.chat_id(), "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º.").await?;
    dialogue.update(State::Waiting).await?;
    Ok(())
}

pub async fn notion_command(bot: Bot, msg: Message, dialogue: MyDialogue) -> HandlerResult {

    dotenv().ok();
    let notion_acess_url = env::var("NOTION_ACESS_URL").expect("NOTION_ACESS_URL must be set in .env");

    tokio::time::sleep(Duration::from_millis(200)).await;
    bot.send_message(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Notion!").await?;
    tokio::time::sleep(Duration::from_millis(200)).await;
    let ask_to_url = format!("–ú–Ω–µ –æ—Ç —Ç–µ–±—è –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ —Å—Å—ã–ª–∫–µ: [*—Ç—ã–∫*]({})", notion_acess_url);
    bot.send_message(msg.chat.id, ask_to_url)
        .parse_mode(ParseMode::MarkdownV2)
        .await?;
    dialogue.update(State::GetNotionCode).await?;
    Ok(())
}

pub async fn note_command(bot: Bot, msg: Message, dialogue: MyDialogue) -> HandlerResult {
    if !is_notion_integration_exist(msg.chat.id.to_string()).await {
        bot.send_message(msg.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Notion.").await?;
        dialogue.update(State::Waiting).await?;
        return Ok(());
    }
    bot.send_message(msg.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ ;)").await?;
    dialogue.update(State::NoteHelper).await?;
    Ok(())
}

pub async fn note_helper(bot: Bot, msg: Message, dialogue: MyDialogue) -> HandlerResult {
    match msg.text() {
        Some(note_info) => {
            if notion_reflection_shema(note_info, msg.chat.id.to_string()).await.status().is_success() {
                bot.send_message(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª!\n–ï—Å–ª–∏ –µ—â–µ –±—É–¥–µ—Ç —á—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å - –ø–∏—à–∏ /note.").await?;
            } else {
                bot.send_message(msg.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Notion :( –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...").await?;
            }
        }
        _ => {
            bot.send_message(dialogue.chat_id(), "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å... —Ç–µ–∫—Å—Ç–æ–≤–æ–µ").await?;
        }
    }
    dialogue.update(State::Waiting).await?;
    Ok(())
}
